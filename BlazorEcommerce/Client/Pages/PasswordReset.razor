@page "/password-reset"
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.ComponentModel
@using Smart.Blazor

<h5>Change Password</h5>
@if (!string.IsNullOrWhiteSpace(DataVerification) && hasUpdated == null)
{
    <EditForm Model="request" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="password">New Password</label>
            <template id="tooltip-password">
                <span>{{value}}</span>
            </template>
            <PasswordTextBox Required id="password" TooltipArrow TooltipTemplate="tooltip-password" Placeholder="Enter password" @bind-Value="request.Password" ShowPasswordIcon ShowPasswordStrength Name="password"></PasswordTextBox>
            <ValidationMessage For="@(() => request.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm New Password</label>
            <PasswordTextBox Class="form-control" Required Placeholder="Confirm password" @bind-Value="request.ConfirmPassword" ShowPasswordIcon Name="confirmPassword"></PasswordTextBox>
            <ValidationMessage For="@(() => request.ConfirmPassword)" />
        </div>
        <button type="submit" id="submit" disabled="@(!isComplexityValid || loading)" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Processing...</span>
            }
            else
            {
                <span class="sr-only">Update</span>
            }
        </button>
        <input type="hidden" id="confirmData" @value="request.ConfirmData" />
    </EditForm>
}
else if (hasUpdated == null)
{
    <span>Awaiting reset token...</span>
}
<br />
<div>
    <span class="@($"smart-badge {messageCssClass}")">@message</span>
</div>
<br />
@if (hasUpdated.HasValue)
{
    <br />
    <button type="button" class="btn btn-outline-dark" @onclick="(() => GoToLogin())">Proceed to log in page</button>
}
@code {


    [Parameter]
    [SupplyParameterFromQuery]
    public string? DataVerification { get; set; } = null;

    private UserChangePassword request = new UserChangePassword();
    private string message = string.Empty;
    private bool isComplexityValid = false;
    private bool loading = false;
    private bool? hasUpdated = null;
    private string messageCssClass = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<bool>("customStrength", DotNetObjectReference.Create(this));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {

        if (!string.IsNullOrWhiteSpace(DataVerification))
        {
            request.ConfirmData = DataVerification;
        }
        else
        {
            message = "Data verification is invalid, please try resetting your password again.";
        }
        await base.OnParametersSetAsync();
    }

    private async Task ChangePassword()
    {
        loading = true;
        ServiceResponse<bool> result = await AuthService.PasswordReset(request);

        if (result.Success)
        {
            messageCssClass = "smart-badge-success";
            hasUpdated = true;
        }
        else
        {
            messageCssClass = "smart-badge-danger";
            hasUpdated = false;
        }
        loading = false;
        message = result.Message;
        StateHasChanged();
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackComplexityCheck(bool valid)
    {
        if (isComplexityValid != valid)
        {
            isComplexityValid = valid;
            StateHasChanged();
        }
    }

    public void GoToLogin()
    {
        NavigationManager.NavigateTo("login", true);
    }
}

