@page "/register"
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.ComponentModel
@using Smart.Blazor

<PageTitle>Register</PageTitle>

<h3>Register</h3>

@if (!isRegisted.HasValue)
{
    <EditForm Model="user" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="name">Name</label>
            <InputText id="UserName" @bind-Value="user.UserName" class="form-control" />
            <ValidationMessage For="@(() => user.UserName)" />
        </div>
        <div class="mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>
        <div class="mb-3">
            <label for="password">Password</label>
            <template id="tooltip-password">
                <span>{{value}}</span>
            </template>
            <PasswordTextBox Required id="password" TooltipArrow TooltipTemplate="tooltip-password" Placeholder="Enter password" @bind-Value="user.Password" ShowPasswordIcon ShowPasswordStrength Name="password"></PasswordTextBox>
            <ValidationMessage For="@(() => user.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm Password</label>
            <PasswordTextBox Class="form-control" Required Placeholder="Confirm password" @bind-Value="user.ConfirmPassword" ShowPasswordIcon Name="confirmPassword"></PasswordTextBox>
            <ValidationMessage For="@(() => user.ConfirmPassword)" />
        </div>
        <button type="submit" id="submit" disabled="@(!isCaptchaValid  || !isComplexityValid || loading)" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="sr-only">Processing...</span>
            }
            else
            {
                <span class="sr-only">Register</span>
            }
        </button>
    </EditForm>

    <br />

    <div id="google_recaptcha"></div>
}
<br />
<div>
    <span class="@($"smart-badge {messageCssClass}")">@message</span>
</div>
<br />
@if (isRegisted.HasValue && isRegisted.Value)
{
    <br />
    <button type="button" class="btn btn-outline-dark" @onclick="(() => GoToLogin())">Proceed to log in page</button>
}
@if (isRegisted.HasValue && !isRegisted.Value)
{
    <br />
    <button type="button" class="btn btn-outline-dark" @onclick="(() => ReTry())" @onclick:preventDefault="true">Try Again</button>
}

@code {
    UserRegister user = new UserRegister();
    private bool? isRegisted = null;
    private string messageCssClass = string.Empty;
    private string message = string.Empty;
    private bool isCaptchaValid = false;
    private bool isComplexityValid = false;
    private bool loading = false;
    private string captchaResponse = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<int>("googleRecaptcha", DotNetObjectReference.Create(this), "google_recaptcha", "6LduJgkjAAAAAEb8xIyJXHYLQb3U00J5DWHw-hLt");
            await JSRuntime.InvokeAsync<bool>("customStrength", DotNetObjectReference.Create(this));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void GoToLogin()
    {
        NavigationManager.NavigateTo("login");
    }

    public void ReTry()
    {
        NavigationManager.NavigateTo($"{NavigationManager.Uri}?t={DateTimeOffset.Now.ToUnixTimeMilliseconds().ToString()}", true);
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnSuccess(string response)
    {
        captchaResponse = response;
        if (!string.IsNullOrWhiteSpace(response))
        {
            isCaptchaValid = true;
        }
        else
        {
            isCaptchaValid = false;
        }
        StateHasChanged();
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnFailed(string response)
    {
        isCaptchaValid = false;
        StateHasChanged();
        Console.WriteLine(response);
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackComplexityCheck(bool valid)
    {
        if (isComplexityValid != valid)
        {
            isComplexityValid = valid;
            StateHasChanged();
        }
    }

    async Task HandleRegistration()
    {
        loading = true;
        var result = await AuthService.Register(user);
        message = result.Message;

        if (result.Success)
        {
            messageCssClass = "smart-badge-success";
            isRegisted = true;
        }
        else
        {
            messageCssClass = "smart-badge-danger";
            isRegisted = false;
        }
        StateHasChanged();
    }
}
